const mongoose = require('mongoose');
const Notification = require('./models/Notification');
const User = require('./models/User');
const Board = require('./models/Board');
const Card = require('./models/Card');
const { createNotification } = require('./routes/notificationRoutes');
require('dotenv').config();

// Conectar ao MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('Conectado ao MongoDB para testes'))
.catch((err) => console.error('Erro ao conectar ao MongoDB:', err));

async function testNotifications() {
  try {
    console.log('üß™ Iniciando testes do sistema de notifica√ß√µes...\n');

    // Buscar usu√°rios de teste
    const users = await User.find().limit(2);
    if (users.length < 2) {
      console.log('‚ùå √â necess√°rio ter pelo menos 2 usu√°rios no banco para testar');
      return;
    }

    const user1 = users[0];
    const user2 = users[1];

    console.log(`üë§ Usu√°rio 1: ${user1.nomeCompleto} (${user1.email})`);
    console.log(`üë§ Usu√°rio 2: ${user2.nomeCompleto} (${user2.email})\n`);

    // Teste 1: Criar notifica√ß√£o de quadro adicionado
    console.log('üìã Teste 1: Notifica√ß√£o de quadro adicionado');
    await createNotification(
      user2._id,
      'board_added',
      'Voc√™ foi adicionado a um quadro',
      `${user1.nomeCompleto} adicionou voc√™ ao quadro "Projeto Teste"`,
      { boardId: new mongoose.Types.ObjectId() }
    );
    console.log('‚úÖ Notifica√ß√£o de quadro adicionado criada\n');

    // Teste 2: Criar notifica√ß√£o de prazo pr√≥ximo
    console.log('‚è∞ Teste 2: Notifica√ß√£o de prazo pr√≥ximo');
    await createNotification(
      user2._id,
      'card_due_soon',
      'Prazo pr√≥ximo',
      'O cart√£o "Implementar login" vence em 2 dias no quadro "Projeto Teste"',
      { 
        boardId: new mongoose.Types.ObjectId(),
        cardId: new mongoose.Types.ObjectId()
      }
    );
    console.log('‚úÖ Notifica√ß√£o de prazo pr√≥ximo criada\n');

    // Teste 3: Criar notifica√ß√£o de men√ß√£o
    console.log('üìù Teste 3: Notifica√ß√£o de men√ß√£o');
    await createNotification(
      user2._id,
      'card_mentioned',
      'Voc√™ foi mencionado',
      `${user1.nomeCompleto} mencionou voc√™ no cart√£o "Criar API"`,
      { 
        mentionedBy: user1._id,
        cardId: new mongoose.Types.ObjectId(),
        boardId: new mongoose.Types.ObjectId()
      }
    );
    console.log('‚úÖ Notifica√ß√£o de men√ß√£o criada\n');

    // Teste 4: Criar notifica√ß√£o de cart√£o movido
    console.log('üîÑ Teste 4: Notifica√ß√£o de cart√£o movido');
    await createNotification(
      user2._id,
      'card_moved',
      'Cart√£o movido',
      `${user1.nomeCompleto} moveu o cart√£o "Configurar ambiente" de "A fazer" para "Em andamento"`,
      { 
        cardId: new mongoose.Types.ObjectId(),
        boardId: new mongoose.Types.ObjectId()
      }
    );
    console.log('‚úÖ Notifica√ß√£o de cart√£o movido criada\n');

    // Teste 5: Criar notifica√ß√£o de lista criada
    console.log('üìã Teste 5: Notifica√ß√£o de lista criada');
    await createNotification(
      user2._id,
      'list_created',
      'Nova lista criada',
      `${user1.nomeCompleto} criou uma nova lista "Code Review"`,
      { 
        boardId: new mongoose.Types.ObjectId(),
        listId: 'Code Review'
      }
    );
    console.log('‚úÖ Notifica√ß√£o de lista criada criada\n');

    // Verificar notifica√ß√µes criadas
    console.log('üîç Verificando notifica√ß√µes criadas...');
    const notifications = await Notification.find({ userId: user2._id })
      .sort({ createdAt: -1 })
      .limit(5);

    console.log(`üìä Total de notifica√ß√µes para ${user2.nomeCompleto}: ${notifications.length}`);
    
    notifications.forEach((notification, index) => {
      console.log(`\n${index + 1}. ${notification.title}`);
      console.log(`   Tipo: ${notification.type}`);
      console.log(`   Mensagem: ${notification.message}`);
      console.log(`   Lida: ${notification.read ? 'Sim' : 'N√£o'}`);
      console.log(`   Criada em: ${notification.createdAt.toLocaleString('pt-BR')}`);
    });

    console.log('\nüéâ Testes conclu√≠dos com sucesso!');
    console.log('\nüí° Para testar no frontend:');
    console.log('1. Inicie o servidor: npm start');
    console.log('2. Acesse a p√°gina de notifica√ß√µes');
    console.log('3. Fa√ßa login com o usu√°rio que recebeu as notifica√ß√µes');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  } finally {
    mongoose.connection.close();
    console.log('\nüîå Conex√£o com MongoDB fechada');
  }
}

// Executar testes se o arquivo for executado diretamente
if (require.main === module) {
  testNotifications();
}

module.exports = { testNotifications }; 